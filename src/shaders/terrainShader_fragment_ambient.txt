#version 430 core

struct Light {
	vec4 position;
	vec3 colour;
	vec3 La;
	vec3 Ld;
	vec3 Ls;
};

in vec2 pass_textureCoordinates; // st
in vec3 n;
in vec3 v;
in vec3 s[2];
in float visibility;

out vec4 out_colour;

uniform sampler2D terrainTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform Light lights[2];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {
	// We use the non-tiled coordinates here (we map 1 to 1 onto the terrain)
	vec4 blendMapColour = texture(blendMap, pass_textureCoordinates);
	// Calculate the amount we render the background texture
	float totalBlendMapColour = blendMapColour.r + blendMapColour.g + blendMapColour.b;
	float terrainTextureAmount = 1 - totalBlendMapColour;
	vec2 tiledTextureCoords = pass_textureCoordinates * 40.0;
	vec4 terrainTextureColour = texture(terrainTexture, tiledTextureCoords) * terrainTextureAmount;
	vec4 rTextureColour = texture(rTexture, tiledTextureCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledTextureCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledTextureCoords) * blendMapColour.b;
	vec4 totalColour = terrainTextureColour + rTextureColour + gTextureColour + bTextureColour;

	vec3 unitN = normalize(n);
	vec3 unitV = normalize(v);	
	
	vec3 Ia = vec3(0.0); 
	vec3 Id = vec3(0.0); 
	vec3 Is = vec3(0.0);
	
	for (int i = 0; i < lights.length(); i++) {
	    vec3 unitS = normalize(s[i]);
	    
	    // Calculate the dot product of the vector to the light source and the surface normal
		float sDotN = dot(unitS, unitN);
		float brightness = max(0.0, sDotN);

	    // Calculate the reflection vector between light and surface
		vec3 lightDirection = -unitS;
	    vec3 r = reflect(lightDirection, unitN);
	
	    // Calculate ambient contribution
	    Ia += lights[i].La;
	
	    // We always apply the ambient light to our fragment colour
		out_colour = vec4(Ia, 1.0);
	
	    // If the surface is facing the light source
		if (sDotN > 0.0) {			
	        // Calculate the diffuse contribution
	        Id += lights[i].Ld * brightness;
	
	        // Calculate the specular contribution
	        float specularFactor = dot(r, unitV);
		    specularFactor = max(0.0, specularFactor);
		    float dampedFactor = pow(specularFactor, shineDamper);
	        Is += lights[i].Ls * reflectivity * dampedFactor;
	        
	        out_colour += vec4(Id + Is, 1.0);	
		}
	}
	
    // Add the diffuse and specular contributions to our output fragment colour
	out_colour = mix(out_colour, totalColour, 0.5);	
	out_colour = mix(vec4(skyColour, 1.0), out_colour, visibility);	
}